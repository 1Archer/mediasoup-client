/**
 * Fill the given RTP parameters for the given track.
 *
 * NOTE: Currently it assumes a single encoding (no simulcast).
 *
 * @param {RTCRtpParameters} rtpParameters -  RTP parameters to be filled.
 * @param {Object} sdpObj - Local SDP Object generated by sdp-transform.
 * @param {MediaStreamTrack} track
 */
export function fillRtpParametersForTrack(rtpParameters, sdpObj, track)
{
	const kind = track.kind;
	let ssrc;
	const encoding = {};
	const rtcp =
	{
		cname       : null,
		reducedSize : true,
		mux         : true
	};

	const mSection = (sdpObj.media || [])
		.find((m) =>
		{
			if (m.type !== kind)
				return;

			const msidLine = m.msid;

			if (!msidLine)
				return;

			const trackId = msidLine.split(' ')[1];

			if (trackId === track.id)
				return true;
		});

	if (!mSection)
		throw new Error(`m=${kind} section not found`);

	// Get the SSRC and CNAME.

	const ssrcCnameLine = (mSection.ssrcs || [])
		.find((line) => line.attribute === 'cname');

	if (!ssrcCnameLine)
		throw new Error(`a=ssrc line not found for local track [track.id:${track.id}]`);

	ssrc = ssrcCnameLine.id;
	encoding.ssrc = ssrcCnameLine.id;
	rtcp.cname = ssrcCnameLine.value;

	// Get the SSRC for RTX.

	(mSection.ssrcGroups || [])
		.some((line) =>
		{
			if (line.semantics !== 'FID')
				return;

			const ssrcs = line.ssrcs.split(/[ ]+/);

			if (Number(ssrcs[0]) === ssrc)
			{
				const rtxSsrc = Number(ssrcs[1]);

				encoding.rtx = { ssrc : rtxSsrc };
				return true;
			}
		});

	// Fill RTP parameters.
	rtpParameters.encodings = [ encoding ];
	rtpParameters.rtcp = rtcp;
}
