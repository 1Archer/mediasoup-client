const sdpTransform = require('sdp-transform');

/**
 * Extract RTP capabilities from a SDP.
 *
 * @param {Object} sdpObj - SDP Object generated by sdp-transform.
 *
 * @returns {RTCRtpCapabilities}
 */
exports.extractRtpCapabilities = function({ sdpObj })
{
	// Map of RtpCodecParameters indexed by payload type.
	const codecsMap = new Map();

	// Array of RtpHeaderExtensions.
	const headerExtensions = [];

	// Whether a m=audio/video section has been already found.
	let gotAudio = false;
	let gotVideo = false;

	for (const m of sdpObj.media)
	{
		const kind = m.type;

		switch (kind)
		{
			case 'audio':
			{
				if (gotAudio)
					continue;

				gotAudio = true;

				break;
			}
			case 'video':
			{
				if (gotVideo)
					continue;

				gotVideo = true;

				break;
			}
			default:
			{
				continue;
			}
		}

		// Get codecs.
		for (const rtp of m.rtp)
		{
			const codec =
			{
				name                 : rtp.codec,
				mimeType             : `${kind}/${rtp.codec}`,
				kind                 : kind,
				clockRate            : rtp.rate,
				preferredPayloadType : rtp.payload,
				channels             : rtp.encoding,
				rtcpFeedback         : [],
				parameters           : {}
			};

			if (codec.kind !== 'audio')
				delete codec.channels;
			else if (!codec.channels)
				codec.channels = 1;

			codecsMap.set(codec.preferredPayloadType, codec);
		}

		// Get codec parameters.
		for (const fmtp of m.fmtp || [])
		{
			const parameters = sdpTransform.parseFmtpConfig(fmtp.config);
			const codec = codecsMap.get(fmtp.payload);

			if (!codec)
				continue;

			codec.parameters = parameters;
		}

		// Get RTCP feedback for each codec.
		for (const fb of m.rtcpFb || [])
		{
			const codec = codecsMap.get(fb.payload);

			if (!codec)
				continue;

			const feedback =
			{
				type      : fb.type,
				parameter : fb.subtype
			};

			if (!feedback.parameter)
				delete feedback.parameter;

			codec.rtcpFeedback.push(feedback);
		}

		// Get RTP header extensions.
		for (const ext of m.ext || [])
		{
			const headerExtension =
			{
				kind        : kind,
				uri         : ext.uri,
				preferredId : ext.value
			};

			headerExtensions.push(headerExtension);
		}
	}

	const rtpCapabilities =
	{
		codecs           : Array.from(codecsMap.values()),
		headerExtensions : headerExtensions,
		fecMechanisms    : [] // TODO
	};

	return rtpCapabilities;
};

/**
 * Extract DTLS parameters from a SDP.
 *
 * @param {Object} sdpObj - SDP Object generated by sdp-transform.
 *
 * @returns {RTCDtlsParameters}
 */
exports.extractDtlsParameters = function({ sdpObj })
{
	const media = getFirstActiveMediaSection(sdpObj);
	const fingerprint = media.fingerprint || sdpObj.fingerprint;
	let role;

	switch (media.setup)
	{
		case 'active':
			role = 'client';
			break;
		case 'passive':
			role = 'server';
			break;
		case 'actpass':
			role = 'auto';
			break;
	}

	const dtlsParameters =
	{
		role         : role,
		fingerprints :
		[
			{
				algorithm : fingerprint.type,
				value     : fingerprint.hash
			}
		]
	};

	return dtlsParameters;
};

/**
 * Set codec parameters by mangling the SDP.
 *
 * @param {Object} sdpObj - SDP Object generated by sdp-transform.
 * @param {String} [mid] - MID value.
 * @param {MediaStreamTrack} [track]
 * @param {RTCRtpParameters} rtpParameters
 * @param {Boolean} [opusStereo] - Whether to enable stereo in OPUS.
 * @param {Boolean} [opusFec] - Whether to enable in-band FEC in OPUS.
 * @param {Boolean} [opusDtx] - Whether to enable DTX in OPUS.
 * @param {Number} [opusMaxPlaybackRate] - Max playback rate in OPUS.
 */
exports.setCodecParameters = function(
	{
		sdpObj,
		mid,
		track,
		rtpParameters,
		opusStereo,
		opusFec,
		opusDtx,
		opusMaxPlaybackRate
	}
)
{
	const mSection = findMediaSection(sdpObj, track, mid);

	if (!mSection)
		throw Error(`media section with mid "${mid}" not found`);

	const codec = rtpParameters.codecs[0];
	const fmtp = mSection.fmtp.find((f) => f.payload === codec.payloadType);
	const params = sdpTransform.parseParams(fmtp.config);

	switch (codec.mimeType.toLowerCase())
	{
		case 'audio/opus':
		{
			if (opusStereo !== undefined)
			{
				if (opusStereo)
				{
					params.stereo = 1;
					params['sprop-stereo'] = 1;
					codec.parameters.stereo = 1;
					codec.parameters['sprop-stereo'] = 1;
				}
				else
				{
					params.stereo = 0;
					params['sprop-stereo'] = 0;
					codec.parameters.stereo = 0;
					codec.parameters['sprop-stereo'] = 0;
				}
			}

			if (opusFec !== undefined)
			{
				if (opusFec)
				{
					params.useinbandfec = 1;
					codec.parameters.useinbandfec = 1;
				}
				else
				{
					params.useinbandfec = 0;
					codec.parameters.useinbandfec = 0;
				}
			}

			if (opusDtx !== undefined)
			{
				if (opusDtx)
				{
					params.usedtx = 1;
					codec.parameters.usedtx = 1;
				}
				else
				{
					params.usedtx = 0;
					codec.parameters.usedtx = 0;
				}
			}

			if (opusMaxPlaybackRate !== undefined)
			{
				params.maxplaybackrate = opusMaxPlaybackRate;
				codec.parameters.maxplaybackrate = opusMaxPlaybackRate;
			}

			break;
		}
	}

	// Write the codec fmtp.config back.
	fmtp.config = '';

	for (const key of Object.keys(params))
	{
		if (fmtp.config)
			fmtp.config += ';';

		fmtp.config += `${key}=${params[key]}`;
	}
};

function getFirstActiveMediaSection(sdpObj)
{
	return (sdpObj.media || [])
		.find((m) => m.iceUfrag && m.port !== 0);
}

function findMediaSection(sdpObj, track, mid)
{
	let mSection;

	if (mid !== null && mid !== undefined)
	{
		mid = String(mid);

		mSection = (sdpObj.media || [])
			.find((m) => String(m.mid) === mid);

		if (!mSection)
			throw new Error(`SDP section with mid=${mid} not found`);
	}
	else
	{
		mSection = (sdpObj.media || [])
			.find((m) => (
				m.type === track.kind &&
				m.msid &&
				m.msid.split(' ')[1] === track.id
			));

		if (!mSection)
			throw new Error(`SDP section with a=msid containing track.id=${track.id} not found`);
	}

	return mSection;
}
